# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ases_mc_pkg1/status.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class status(genpy.Message):
  _md5sum = "80a82fb24463903407d9067cb2bffe7b"
  _type = "ases_mc_pkg1/status"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 Position_x
float32 Position_y
float32 Position_z
float32 Position_o
float32 Position_g
float32 Position_r
int32 GR_g
float32 Current_x
float32 Current_y
float32 Current_z
float32 Current_o
float32 Current_g
float32 Current_r
"""
  __slots__ = ['Position_x','Position_y','Position_z','Position_o','Position_g','Position_r','GR_g','Current_x','Current_y','Current_z','Current_o','Current_g','Current_r']
  _slot_types = ['float32','float32','float32','float32','float32','float32','int32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Position_x,Position_y,Position_z,Position_o,Position_g,Position_r,GR_g,Current_x,Current_y,Current_z,Current_o,Current_g,Current_r

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(status, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.Position_x is None:
        self.Position_x = 0.
      if self.Position_y is None:
        self.Position_y = 0.
      if self.Position_z is None:
        self.Position_z = 0.
      if self.Position_o is None:
        self.Position_o = 0.
      if self.Position_g is None:
        self.Position_g = 0.
      if self.Position_r is None:
        self.Position_r = 0.
      if self.GR_g is None:
        self.GR_g = 0
      if self.Current_x is None:
        self.Current_x = 0.
      if self.Current_y is None:
        self.Current_y = 0.
      if self.Current_z is None:
        self.Current_z = 0.
      if self.Current_o is None:
        self.Current_o = 0.
      if self.Current_g is None:
        self.Current_g = 0.
      if self.Current_r is None:
        self.Current_r = 0.
    else:
      self.Position_x = 0.
      self.Position_y = 0.
      self.Position_z = 0.
      self.Position_o = 0.
      self.Position_g = 0.
      self.Position_r = 0.
      self.GR_g = 0
      self.Current_x = 0.
      self.Current_y = 0.
      self.Current_z = 0.
      self.Current_o = 0.
      self.Current_g = 0.
      self.Current_r = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6fi6f().pack(_x.Position_x, _x.Position_y, _x.Position_z, _x.Position_o, _x.Position_g, _x.Position_r, _x.GR_g, _x.Current_x, _x.Current_y, _x.Current_z, _x.Current_o, _x.Current_g, _x.Current_r))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 52
      (_x.Position_x, _x.Position_y, _x.Position_z, _x.Position_o, _x.Position_g, _x.Position_r, _x.GR_g, _x.Current_x, _x.Current_y, _x.Current_z, _x.Current_o, _x.Current_g, _x.Current_r,) = _get_struct_6fi6f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6fi6f().pack(_x.Position_x, _x.Position_y, _x.Position_z, _x.Position_o, _x.Position_g, _x.Position_r, _x.GR_g, _x.Current_x, _x.Current_y, _x.Current_z, _x.Current_o, _x.Current_g, _x.Current_r))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 52
      (_x.Position_x, _x.Position_y, _x.Position_z, _x.Position_o, _x.Position_g, _x.Position_r, _x.GR_g, _x.Current_x, _x.Current_y, _x.Current_z, _x.Current_o, _x.Current_g, _x.Current_r,) = _get_struct_6fi6f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6fi6f = None
def _get_struct_6fi6f():
    global _struct_6fi6f
    if _struct_6fi6f is None:
        _struct_6fi6f = struct.Struct("<6fi6f")
    return _struct_6fi6f
