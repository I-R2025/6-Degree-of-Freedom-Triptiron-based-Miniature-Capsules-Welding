# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ases_mc_pkg1/axis_motionRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class axis_motionRequest(genpy.Message):
  _md5sum = "76756f30e03f8da3870aac37a0c734f4"
  _type = "ases_mc_pkg1/axis_motionRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string Mode
float64 position_x
float64 position_y
float64 position_z
float64 position_o
float64 position_g
float64 position_r
float64 velocity_x
float64 velocity_y
float64 velocity_z
float64 velocity_o
float64 velocity_g
float64 velocity_r
"""
  __slots__ = ['Mode','position_x','position_y','position_z','position_o','position_g','position_r','velocity_x','velocity_y','velocity_z','velocity_o','velocity_g','velocity_r']
  _slot_types = ['string','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Mode,position_x,position_y,position_z,position_o,position_g,position_r,velocity_x,velocity_y,velocity_z,velocity_o,velocity_g,velocity_r

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(axis_motionRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.Mode is None:
        self.Mode = ''
      if self.position_x is None:
        self.position_x = 0.
      if self.position_y is None:
        self.position_y = 0.
      if self.position_z is None:
        self.position_z = 0.
      if self.position_o is None:
        self.position_o = 0.
      if self.position_g is None:
        self.position_g = 0.
      if self.position_r is None:
        self.position_r = 0.
      if self.velocity_x is None:
        self.velocity_x = 0.
      if self.velocity_y is None:
        self.velocity_y = 0.
      if self.velocity_z is None:
        self.velocity_z = 0.
      if self.velocity_o is None:
        self.velocity_o = 0.
      if self.velocity_g is None:
        self.velocity_g = 0.
      if self.velocity_r is None:
        self.velocity_r = 0.
    else:
      self.Mode = ''
      self.position_x = 0.
      self.position_y = 0.
      self.position_z = 0.
      self.position_o = 0.
      self.position_g = 0.
      self.position_r = 0.
      self.velocity_x = 0.
      self.velocity_y = 0.
      self.velocity_z = 0.
      self.velocity_o = 0.
      self.velocity_g = 0.
      self.velocity_r = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.Mode
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_12d().pack(_x.position_x, _x.position_y, _x.position_z, _x.position_o, _x.position_g, _x.position_r, _x.velocity_x, _x.velocity_y, _x.velocity_z, _x.velocity_o, _x.velocity_g, _x.velocity_r))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Mode = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Mode = str[start:end]
      _x = self
      start = end
      end += 96
      (_x.position_x, _x.position_y, _x.position_z, _x.position_o, _x.position_g, _x.position_r, _x.velocity_x, _x.velocity_y, _x.velocity_z, _x.velocity_o, _x.velocity_g, _x.velocity_r,) = _get_struct_12d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.Mode
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_12d().pack(_x.position_x, _x.position_y, _x.position_z, _x.position_o, _x.position_g, _x.position_r, _x.velocity_x, _x.velocity_y, _x.velocity_z, _x.velocity_o, _x.velocity_g, _x.velocity_r))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Mode = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Mode = str[start:end]
      _x = self
      start = end
      end += 96
      (_x.position_x, _x.position_y, _x.position_z, _x.position_o, _x.position_g, _x.position_r, _x.velocity_x, _x.velocity_y, _x.velocity_z, _x.velocity_o, _x.velocity_g, _x.velocity_r,) = _get_struct_12d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_12d = None
def _get_struct_12d():
    global _struct_12d
    if _struct_12d is None:
        _struct_12d = struct.Struct("<12d")
    return _struct_12d
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ases_mc_pkg1/axis_motionResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class axis_motionResponse(genpy.Message):
  _md5sum = "358e233cde0c8a8bcfea4ce193f8fc15"
  _type = "ases_mc_pkg1/axis_motionResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool success

"""
  __slots__ = ['success']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       success

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(axis_motionResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.success is None:
        self.success = False
    else:
      self.success = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class axis_motion(object):
  _type          = 'ases_mc_pkg1/axis_motion'
  _md5sum = 'c335753bd65b2110697b8c82c9ecf78e'
  _request_class  = axis_motionRequest
  _response_class = axis_motionResponse
