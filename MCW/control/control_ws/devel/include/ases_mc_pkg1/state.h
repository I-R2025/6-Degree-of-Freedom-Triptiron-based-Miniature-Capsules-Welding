// Generated by gencpp from file ases_mc_pkg1/state.msg
// DO NOT EDIT!


#ifndef ASES_MC_PKG1_MESSAGE_STATE_H
#define ASES_MC_PKG1_MESSAGE_STATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ases_mc_pkg1
{
template <class ContainerAllocator>
struct state_
{
  typedef state_<ContainerAllocator> Type;

  state_()
    : x(false)
    , y(false)
    , z(false)
    , o(false)
    , g(false)
    , r(false)  {
    }
  state_(const ContainerAllocator& _alloc)
    : x(false)
    , y(false)
    , z(false)
    , o(false)
    , g(false)
    , r(false)  {
  (void)_alloc;
    }



   typedef uint8_t _x_type;
  _x_type x;

   typedef uint8_t _y_type;
  _y_type y;

   typedef uint8_t _z_type;
  _z_type z;

   typedef uint8_t _o_type;
  _o_type o;

   typedef uint8_t _g_type;
  _g_type g;

   typedef uint8_t _r_type;
  _r_type r;





  typedef boost::shared_ptr< ::ases_mc_pkg1::state_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ases_mc_pkg1::state_<ContainerAllocator> const> ConstPtr;

}; // struct state_

typedef ::ases_mc_pkg1::state_<std::allocator<void> > state;

typedef boost::shared_ptr< ::ases_mc_pkg1::state > statePtr;
typedef boost::shared_ptr< ::ases_mc_pkg1::state const> stateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ases_mc_pkg1::state_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ases_mc_pkg1::state_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ases_mc_pkg1::state_<ContainerAllocator1> & lhs, const ::ases_mc_pkg1::state_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z &&
    lhs.o == rhs.o &&
    lhs.g == rhs.g &&
    lhs.r == rhs.r;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ases_mc_pkg1::state_<ContainerAllocator1> & lhs, const ::ases_mc_pkg1::state_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ases_mc_pkg1

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ases_mc_pkg1::state_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ases_mc_pkg1::state_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ases_mc_pkg1::state_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ases_mc_pkg1::state_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ases_mc_pkg1::state_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ases_mc_pkg1::state_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ases_mc_pkg1::state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "550bf2d382d07f1819d62fc2dab7258e";
  }

  static const char* value(const ::ases_mc_pkg1::state_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x550bf2d382d07f18ULL;
  static const uint64_t static_value2 = 0x19d62fc2dab7258eULL;
};

template<class ContainerAllocator>
struct DataType< ::ases_mc_pkg1::state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ases_mc_pkg1/state";
  }

  static const char* value(const ::ases_mc_pkg1::state_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ases_mc_pkg1::state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool x\n"
"bool y\n"
"bool z\n"
"bool o\n"
"bool g\n"
"bool r\n"
;
  }

  static const char* value(const ::ases_mc_pkg1::state_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ases_mc_pkg1::state_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.o);
      stream.next(m.g);
      stream.next(m.r);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct state_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ases_mc_pkg1::state_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ases_mc_pkg1::state_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.z);
    s << indent << "o: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.o);
    s << indent << "g: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.g);
    s << indent << "r: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.r);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ASES_MC_PKG1_MESSAGE_STATE_H
