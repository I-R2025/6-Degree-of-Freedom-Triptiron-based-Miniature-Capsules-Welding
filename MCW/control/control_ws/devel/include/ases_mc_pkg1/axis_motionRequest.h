// Generated by gencpp from file ases_mc_pkg1/axis_motionRequest.msg
// DO NOT EDIT!


#ifndef ASES_MC_PKG1_MESSAGE_AXIS_MOTIONREQUEST_H
#define ASES_MC_PKG1_MESSAGE_AXIS_MOTIONREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ases_mc_pkg1
{
template <class ContainerAllocator>
struct axis_motionRequest_
{
  typedef axis_motionRequest_<ContainerAllocator> Type;

  axis_motionRequest_()
    : Mode()
    , position_x(0.0)
    , position_y(0.0)
    , position_z(0.0)
    , position_o(0.0)
    , position_g(0.0)
    , position_r(0.0)
    , velocity_x(0.0)
    , velocity_y(0.0)
    , velocity_z(0.0)
    , velocity_o(0.0)
    , velocity_g(0.0)
    , velocity_r(0.0)  {
    }
  axis_motionRequest_(const ContainerAllocator& _alloc)
    : Mode(_alloc)
    , position_x(0.0)
    , position_y(0.0)
    , position_z(0.0)
    , position_o(0.0)
    , position_g(0.0)
    , position_r(0.0)
    , velocity_x(0.0)
    , velocity_y(0.0)
    , velocity_z(0.0)
    , velocity_o(0.0)
    , velocity_g(0.0)
    , velocity_r(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _Mode_type;
  _Mode_type Mode;

   typedef double _position_x_type;
  _position_x_type position_x;

   typedef double _position_y_type;
  _position_y_type position_y;

   typedef double _position_z_type;
  _position_z_type position_z;

   typedef double _position_o_type;
  _position_o_type position_o;

   typedef double _position_g_type;
  _position_g_type position_g;

   typedef double _position_r_type;
  _position_r_type position_r;

   typedef double _velocity_x_type;
  _velocity_x_type velocity_x;

   typedef double _velocity_y_type;
  _velocity_y_type velocity_y;

   typedef double _velocity_z_type;
  _velocity_z_type velocity_z;

   typedef double _velocity_o_type;
  _velocity_o_type velocity_o;

   typedef double _velocity_g_type;
  _velocity_g_type velocity_g;

   typedef double _velocity_r_type;
  _velocity_r_type velocity_r;





  typedef boost::shared_ptr< ::ases_mc_pkg1::axis_motionRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ases_mc_pkg1::axis_motionRequest_<ContainerAllocator> const> ConstPtr;

}; // struct axis_motionRequest_

typedef ::ases_mc_pkg1::axis_motionRequest_<std::allocator<void> > axis_motionRequest;

typedef boost::shared_ptr< ::ases_mc_pkg1::axis_motionRequest > axis_motionRequestPtr;
typedef boost::shared_ptr< ::ases_mc_pkg1::axis_motionRequest const> axis_motionRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ases_mc_pkg1::axis_motionRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ases_mc_pkg1::axis_motionRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ases_mc_pkg1::axis_motionRequest_<ContainerAllocator1> & lhs, const ::ases_mc_pkg1::axis_motionRequest_<ContainerAllocator2> & rhs)
{
  return lhs.Mode == rhs.Mode &&
    lhs.position_x == rhs.position_x &&
    lhs.position_y == rhs.position_y &&
    lhs.position_z == rhs.position_z &&
    lhs.position_o == rhs.position_o &&
    lhs.position_g == rhs.position_g &&
    lhs.position_r == rhs.position_r &&
    lhs.velocity_x == rhs.velocity_x &&
    lhs.velocity_y == rhs.velocity_y &&
    lhs.velocity_z == rhs.velocity_z &&
    lhs.velocity_o == rhs.velocity_o &&
    lhs.velocity_g == rhs.velocity_g &&
    lhs.velocity_r == rhs.velocity_r;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ases_mc_pkg1::axis_motionRequest_<ContainerAllocator1> & lhs, const ::ases_mc_pkg1::axis_motionRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ases_mc_pkg1

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ases_mc_pkg1::axis_motionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ases_mc_pkg1::axis_motionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ases_mc_pkg1::axis_motionRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ases_mc_pkg1::axis_motionRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ases_mc_pkg1::axis_motionRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ases_mc_pkg1::axis_motionRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ases_mc_pkg1::axis_motionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "76756f30e03f8da3870aac37a0c734f4";
  }

  static const char* value(const ::ases_mc_pkg1::axis_motionRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x76756f30e03f8da3ULL;
  static const uint64_t static_value2 = 0x870aac37a0c734f4ULL;
};

template<class ContainerAllocator>
struct DataType< ::ases_mc_pkg1::axis_motionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ases_mc_pkg1/axis_motionRequest";
  }

  static const char* value(const ::ases_mc_pkg1::axis_motionRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ases_mc_pkg1::axis_motionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string Mode\n"
"float64 position_x\n"
"float64 position_y\n"
"float64 position_z\n"
"float64 position_o\n"
"float64 position_g\n"
"float64 position_r\n"
"float64 velocity_x\n"
"float64 velocity_y\n"
"float64 velocity_z\n"
"float64 velocity_o\n"
"float64 velocity_g\n"
"float64 velocity_r\n"
;
  }

  static const char* value(const ::ases_mc_pkg1::axis_motionRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ases_mc_pkg1::axis_motionRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Mode);
      stream.next(m.position_x);
      stream.next(m.position_y);
      stream.next(m.position_z);
      stream.next(m.position_o);
      stream.next(m.position_g);
      stream.next(m.position_r);
      stream.next(m.velocity_x);
      stream.next(m.velocity_y);
      stream.next(m.velocity_z);
      stream.next(m.velocity_o);
      stream.next(m.velocity_g);
      stream.next(m.velocity_r);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct axis_motionRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ases_mc_pkg1::axis_motionRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ases_mc_pkg1::axis_motionRequest_<ContainerAllocator>& v)
  {
    s << indent << "Mode: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.Mode);
    s << indent << "position_x: ";
    Printer<double>::stream(s, indent + "  ", v.position_x);
    s << indent << "position_y: ";
    Printer<double>::stream(s, indent + "  ", v.position_y);
    s << indent << "position_z: ";
    Printer<double>::stream(s, indent + "  ", v.position_z);
    s << indent << "position_o: ";
    Printer<double>::stream(s, indent + "  ", v.position_o);
    s << indent << "position_g: ";
    Printer<double>::stream(s, indent + "  ", v.position_g);
    s << indent << "position_r: ";
    Printer<double>::stream(s, indent + "  ", v.position_r);
    s << indent << "velocity_x: ";
    Printer<double>::stream(s, indent + "  ", v.velocity_x);
    s << indent << "velocity_y: ";
    Printer<double>::stream(s, indent + "  ", v.velocity_y);
    s << indent << "velocity_z: ";
    Printer<double>::stream(s, indent + "  ", v.velocity_z);
    s << indent << "velocity_o: ";
    Printer<double>::stream(s, indent + "  ", v.velocity_o);
    s << indent << "velocity_g: ";
    Printer<double>::stream(s, indent + "  ", v.velocity_g);
    s << indent << "velocity_r: ";
    Printer<double>::stream(s, indent + "  ", v.velocity_r);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ASES_MC_PKG1_MESSAGE_AXIS_MOTIONREQUEST_H
