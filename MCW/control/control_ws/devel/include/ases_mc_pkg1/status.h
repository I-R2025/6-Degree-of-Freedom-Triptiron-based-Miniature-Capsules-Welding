// Generated by gencpp from file ases_mc_pkg1/status.msg
// DO NOT EDIT!


#ifndef ASES_MC_PKG1_MESSAGE_STATUS_H
#define ASES_MC_PKG1_MESSAGE_STATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ases_mc_pkg1
{
template <class ContainerAllocator>
struct status_
{
  typedef status_<ContainerAllocator> Type;

  status_()
    : Position_x(0.0)
    , Position_y(0.0)
    , Position_z(0.0)
    , Position_o(0.0)
    , Position_g(0.0)
    , Position_r(0.0)
    , GR_g(0)
    , Current_x(0.0)
    , Current_y(0.0)
    , Current_z(0.0)
    , Current_o(0.0)
    , Current_g(0.0)
    , Current_r(0.0)  {
    }
  status_(const ContainerAllocator& _alloc)
    : Position_x(0.0)
    , Position_y(0.0)
    , Position_z(0.0)
    , Position_o(0.0)
    , Position_g(0.0)
    , Position_r(0.0)
    , GR_g(0)
    , Current_x(0.0)
    , Current_y(0.0)
    , Current_z(0.0)
    , Current_o(0.0)
    , Current_g(0.0)
    , Current_r(0.0)  {
  (void)_alloc;
    }



   typedef float _Position_x_type;
  _Position_x_type Position_x;

   typedef float _Position_y_type;
  _Position_y_type Position_y;

   typedef float _Position_z_type;
  _Position_z_type Position_z;

   typedef float _Position_o_type;
  _Position_o_type Position_o;

   typedef float _Position_g_type;
  _Position_g_type Position_g;

   typedef float _Position_r_type;
  _Position_r_type Position_r;

   typedef int32_t _GR_g_type;
  _GR_g_type GR_g;

   typedef float _Current_x_type;
  _Current_x_type Current_x;

   typedef float _Current_y_type;
  _Current_y_type Current_y;

   typedef float _Current_z_type;
  _Current_z_type Current_z;

   typedef float _Current_o_type;
  _Current_o_type Current_o;

   typedef float _Current_g_type;
  _Current_g_type Current_g;

   typedef float _Current_r_type;
  _Current_r_type Current_r;





  typedef boost::shared_ptr< ::ases_mc_pkg1::status_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ases_mc_pkg1::status_<ContainerAllocator> const> ConstPtr;

}; // struct status_

typedef ::ases_mc_pkg1::status_<std::allocator<void> > status;

typedef boost::shared_ptr< ::ases_mc_pkg1::status > statusPtr;
typedef boost::shared_ptr< ::ases_mc_pkg1::status const> statusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ases_mc_pkg1::status_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ases_mc_pkg1::status_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ases_mc_pkg1::status_<ContainerAllocator1> & lhs, const ::ases_mc_pkg1::status_<ContainerAllocator2> & rhs)
{
  return lhs.Position_x == rhs.Position_x &&
    lhs.Position_y == rhs.Position_y &&
    lhs.Position_z == rhs.Position_z &&
    lhs.Position_o == rhs.Position_o &&
    lhs.Position_g == rhs.Position_g &&
    lhs.Position_r == rhs.Position_r &&
    lhs.GR_g == rhs.GR_g &&
    lhs.Current_x == rhs.Current_x &&
    lhs.Current_y == rhs.Current_y &&
    lhs.Current_z == rhs.Current_z &&
    lhs.Current_o == rhs.Current_o &&
    lhs.Current_g == rhs.Current_g &&
    lhs.Current_r == rhs.Current_r;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ases_mc_pkg1::status_<ContainerAllocator1> & lhs, const ::ases_mc_pkg1::status_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ases_mc_pkg1

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ases_mc_pkg1::status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ases_mc_pkg1::status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ases_mc_pkg1::status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ases_mc_pkg1::status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ases_mc_pkg1::status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ases_mc_pkg1::status_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ases_mc_pkg1::status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "80a82fb24463903407d9067cb2bffe7b";
  }

  static const char* value(const ::ases_mc_pkg1::status_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x80a82fb244639034ULL;
  static const uint64_t static_value2 = 0x07d9067cb2bffe7bULL;
};

template<class ContainerAllocator>
struct DataType< ::ases_mc_pkg1::status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ases_mc_pkg1/status";
  }

  static const char* value(const ::ases_mc_pkg1::status_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ases_mc_pkg1::status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 Position_x\n"
"float32 Position_y\n"
"float32 Position_z\n"
"float32 Position_o\n"
"float32 Position_g\n"
"float32 Position_r\n"
"int32 GR_g\n"
"float32 Current_x\n"
"float32 Current_y\n"
"float32 Current_z\n"
"float32 Current_o\n"
"float32 Current_g\n"
"float32 Current_r\n"
;
  }

  static const char* value(const ::ases_mc_pkg1::status_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ases_mc_pkg1::status_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Position_x);
      stream.next(m.Position_y);
      stream.next(m.Position_z);
      stream.next(m.Position_o);
      stream.next(m.Position_g);
      stream.next(m.Position_r);
      stream.next(m.GR_g);
      stream.next(m.Current_x);
      stream.next(m.Current_y);
      stream.next(m.Current_z);
      stream.next(m.Current_o);
      stream.next(m.Current_g);
      stream.next(m.Current_r);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct status_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ases_mc_pkg1::status_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ases_mc_pkg1::status_<ContainerAllocator>& v)
  {
    s << indent << "Position_x: ";
    Printer<float>::stream(s, indent + "  ", v.Position_x);
    s << indent << "Position_y: ";
    Printer<float>::stream(s, indent + "  ", v.Position_y);
    s << indent << "Position_z: ";
    Printer<float>::stream(s, indent + "  ", v.Position_z);
    s << indent << "Position_o: ";
    Printer<float>::stream(s, indent + "  ", v.Position_o);
    s << indent << "Position_g: ";
    Printer<float>::stream(s, indent + "  ", v.Position_g);
    s << indent << "Position_r: ";
    Printer<float>::stream(s, indent + "  ", v.Position_r);
    s << indent << "GR_g: ";
    Printer<int32_t>::stream(s, indent + "  ", v.GR_g);
    s << indent << "Current_x: ";
    Printer<float>::stream(s, indent + "  ", v.Current_x);
    s << indent << "Current_y: ";
    Printer<float>::stream(s, indent + "  ", v.Current_y);
    s << indent << "Current_z: ";
    Printer<float>::stream(s, indent + "  ", v.Current_z);
    s << indent << "Current_o: ";
    Printer<float>::stream(s, indent + "  ", v.Current_o);
    s << indent << "Current_g: ";
    Printer<float>::stream(s, indent + "  ", v.Current_g);
    s << indent << "Current_r: ";
    Printer<float>::stream(s, indent + "  ", v.Current_r);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ASES_MC_PKG1_MESSAGE_STATUS_H
